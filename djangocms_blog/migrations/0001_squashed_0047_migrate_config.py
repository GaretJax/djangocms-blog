# Generated by Django 3.2.19 on 2023-07-18 00:24

import django.db.models.deletion
import django.db.models.expressions
import djangocms_text_ckeditor.fields
import filer.fields.image
import meta.models
import parler.fields
import sortedm2m.fields
import taggit_autosuggest.managers
from django.conf import settings
from django.db import migrations, models

import djangocms_blog.models


class Migration(migrations.Migration):
    replaces = [
        ("djangocms_blog", "0001_initial"),
        ("djangocms_blog", "0002_post_sites"),
        ("djangocms_blog", "0003_auto_20141201_2252"),
        ("djangocms_blog", "0004_auto_20150108_1435"),
        ("djangocms_blog", "0005_auto_20150212_1118"),
        ("djangocms_blog", "0006_auto_20150214_1907"),
        ("djangocms_blog", "0007_auto_20150719_0933"),
        ("djangocms_blog", "0008_auto_20150814_0831"),
        ("djangocms_blog", "0009_latestpostsplugin_tags_new"),
        ("djangocms_blog", "0010_auto_20150923_1151"),
        ("djangocms_blog", "0011_auto_20151024_1809"),
        ("djangocms_blog", "0012_auto_20151220_1734"),
        ("djangocms_blog", "0013_auto_20160201_2235"),
        ("djangocms_blog", "0014_auto_20160215_1331"),
        ("djangocms_blog", "0015_auto_20160408_1849"),
        ("djangocms_blog", "0016_auto_20160502_1741"),
        ("djangocms_blog", "0017_thumbnail_move"),
        ("djangocms_blog", "0018_thumbnail_move2"),
        ("djangocms_blog", "0019_thumbnail_move3"),
        ("djangocms_blog", "0020_thumbnail_move4"),
        ("djangocms_blog", "0021_post_liveblog"),
        ("djangocms_blog", "0022_auto_20160605_2305"),
        ("djangocms_blog", "0023_auto_20160626_1539"),
        ("djangocms_blog", "0024_auto_20160706_1524"),
        ("djangocms_blog", "0025_auto_20160803_0858"),
        ("djangocms_blog", "0021_auto_20160823_2008"),
        ("djangocms_blog", "0026_merge"),
        ("djangocms_blog", "0027_post_date_featured"),
        ("djangocms_blog", "0028_auto_20170304_1040"),
        ("djangocms_blog", "0029_post_related"),
        ("djangocms_blog", "0030_auto_20170509_1831"),
        ("djangocms_blog", "0031_auto_20170610_1744"),
        ("djangocms_blog", "0032_auto_20180109_0023"),
        ("djangocms_blog", "0033_auto_20180226_1410"),
        ("djangocms_blog", "0022_auto_20170304_1040"),
        ("djangocms_blog", "0034_merge"),
        ("djangocms_blog", "0035_posttranslation_subtitle"),
        ("djangocms_blog", "0036_auto_20180913_1809"),
        ("djangocms_blog", "0037_auto_20190806_0743"),
        ("djangocms_blog", "0038_post_media"),
        ("djangocms_blog", "0039_auto_20200331_2227"),
        ("djangocms_blog", "0040_post_include_in_rss"),
        ("djangocms_blog", "0040_auto_20211128_1503"),
        ("djangocms_blog", "0041_auto_20211214_1137"),
        ("djangocms_blog", "0042_alter_post_enable_comments"),
        ("djangocms_blog", "0043_postcontent"),
        ("djangocms_blog", "0044_copy_plugins"),
        ("djangocms_blog", "0045_auto_20230314_0747"),
        ("djangocms_blog", "0046_auto_20230717_2307"),
        ("djangocms_blog", "0047_migrate_config"),
    ]

    initial = True

    dependencies = [
        ("filer", "0015_alter_file_owner_alter_file_polymorphic_ctype_and_more"),
        ("sites", "__first__"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("cms", "0020_old_tree_cleanup"),
        ("filer", "__first__"),
        ("cms", "0004_auto_20140924_1038"),
        ("filer", "0003_thumbnailoption"),
        ("taggit", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogConfig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(max_length=100, verbose_name="Type")),
                (
                    "namespace",
                    models.CharField(default=None, max_length=100, unique=True, verbose_name="Instance namespace"),
                ),
                (
                    "default_image_full",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left empty the image size will have to be set for every newly created post.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_images_full",
                        to="filer.thumbnailoption",
                        verbose_name="Default size of full images",
                    ),
                ),
                (
                    "default_image_thumbnail",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left empty the thumbnail image size will have to be set for every newly created post.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_images_thumbnail",
                        to="filer.thumbnailoption",
                        verbose_name="Default size of thumbnail images",
                    ),
                ),
                (
                    "gplus_author",
                    models.CharField(
                        blank=True,
                        default="get_author_schemaorg",
                        max_length=200,
                        verbose_name="Schema.org author name",
                    ),
                ),
                (
                    "gplus_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Article", "Article"),
                            ("Blog", "Blog"),
                            ("WebPage", "Page"),
                            ("WebSite", "WebSite"),
                            ("Event", "Event"),
                            ("Product", "Product"),
                            ("Place", "Place"),
                            ("Person", "Person"),
                            ("Book", "Book"),
                            ("LocalBusiness", "LocalBusiness"),
                            ("Organization", "Organization"),
                            ("Review", "Review"),
                        ],
                        default="Blog",
                        max_length=200,
                        verbose_name="Schema.org type",
                    ),
                ),
                (
                    "menu_empty_categories",
                    models.BooleanField(
                        default=True,
                        help_text="Show categories with no post attached in the menu",
                        verbose_name="Show empty categories in menu",
                    ),
                ),
                (
                    "menu_structure",
                    models.CharField(
                        choices=[
                            ("complete", "Categories and posts"),
                            ("categories", "Categories only"),
                            ("posts", "Posts only"),
                            ("none", "None"),
                        ],
                        default="complete",
                        help_text="Structure of the django CMS menu",
                        max_length=200,
                        verbose_name="Menu structure",
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        blank=True,
                        choices=[("Article", "Article"), ("Website", "Website")],
                        default="Article",
                        max_length=200,
                        verbose_name="Object type",
                    ),
                ),
                (
                    "og_app_id",
                    models.CharField(blank=True, default="", max_length=200, verbose_name="Facebook application ID"),
                ),
                (
                    "og_author",
                    models.CharField(
                        blank=True, default="get_author_name", max_length=200, verbose_name="Facebook author"
                    ),
                ),
                (
                    "og_author_url",
                    models.CharField(
                        blank=True, default="get_author_url", max_length=200, verbose_name="Facebook author URL"
                    ),
                ),
                (
                    "og_profile_id",
                    models.CharField(blank=True, default="", max_length=200, verbose_name="Facebook profile ID"),
                ),
                (
                    "og_publisher",
                    models.CharField(blank=True, default="", max_length=200, verbose_name="Facebook page URL"),
                ),
                (
                    "og_type",
                    models.CharField(
                        blank=True,
                        choices=[("Article", "Article"), ("Website", "Website")],
                        default="Article",
                        max_length=200,
                        verbose_name="Facebook type",
                    ),
                ),
                (
                    "paginate_by",
                    models.SmallIntegerField(
                        default=10,
                        help_text="When paginating list views, how many articles per page?",
                        null=True,
                        verbose_name="Paginate size",
                    ),
                ),
                (
                    "send_knock_create",
                    models.BooleanField(
                        default=False,
                        help_text="Emits a desktop notification -if enabled- when publishing a new post",
                        verbose_name="Send notifications on post publish",
                    ),
                ),
                (
                    "send_knock_update",
                    models.BooleanField(
                        default=False,
                        help_text="Emits a desktop notification -if enabled- when editing a published post",
                        verbose_name="Send notifications on post update",
                    ),
                ),
                ("set_author", models.BooleanField(default=True, verbose_name="Set author by default")),
                (
                    "sitemap_changefreq",
                    models.CharField(
                        choices=[
                            ("always", "always"),
                            ("hourly", "hourly"),
                            ("daily", "daily"),
                            ("weekly", "weekly"),
                            ("monthly", "monthly"),
                            ("yearly", "yearly"),
                            ("never", "never"),
                        ],
                        default="monthly",
                        help_text="Changefreq attribute for sitemap items",
                        max_length=12,
                        verbose_name="Sitemap changefreq",
                    ),
                ),
                (
                    "sitemap_priority",
                    models.DecimalField(
                        decimal_places=3,
                        default="0.5",
                        help_text="Priority attribute for sitemap items",
                        max_digits=5,
                        verbose_name="Sitemap priority",
                    ),
                ),
                (
                    "template_prefix",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Alternative directory to load the blog templates from",
                        max_length=200,
                        verbose_name="Template prefix",
                    ),
                ),
                (
                    "twitter_author",
                    models.CharField(
                        blank=True, default="get_author_twitter", max_length=200, verbose_name="Twitter author handle"
                    ),
                ),
                (
                    "twitter_site",
                    models.CharField(blank=True, default="", max_length=200, verbose_name="Twitter site handle"),
                ),
                (
                    "twitter_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("summary", "Summary Card"),
                            ("summary_large_image", "Summary Card with Large Image"),
                            ("product", "Product"),
                            ("photo", "Photo"),
                            ("player", "Player"),
                            ("app", "App"),
                        ],
                        default="summary",
                        max_length=200,
                        verbose_name="Twitter type",
                    ),
                ),
                (
                    "url_patterns",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("full_date", "Full date"),
                            ("short_date", "Year /  Month"),
                            ("category", "Category"),
                            ("slug", "Just slug"),
                        ],
                        default="full_date",
                        max_length=12,
                        verbose_name="Permalink structure",
                    ),
                ),
                (
                    "urlconf",
                    models.CharField(
                        choices=[
                            ("djangocms_blog.urls", "Blog: Blog list at root url of blog"),
                            ("djangocms_blog.urls_hub", "Content hub: Category list at root url of blog"),
                        ],
                        default="djangocms_blog.urls",
                        max_length=200,
                        verbose_name="URL config",
                    ),
                ),
                ("use_abstract", models.BooleanField(default=True, verbose_name="Use abstract field")),
                (
                    "use_placeholder",
                    models.BooleanField(default=True, verbose_name="Use placeholder and plugins for article body"),
                ),
                (
                    "use_related",
                    models.SmallIntegerField(
                        choices=[(0, "No"), (1, "Yes, from this blog config"), (2, "Yes, from this site")],
                        default=1,
                        verbose_name="Enable related posts",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "blog config",
                "verbose_name_plural": "blog configs",
            },
        ),
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date_created", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("date_modified", models.DateTimeField(auto_now=True, verbose_name="modified at")),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="djangocms_blog.blogcategory",
                        verbose_name="parent",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        help_text="When selecting a value, the form is reloaded to get the updated default",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djangocms_blog.blogconfig",
                        verbose_name="app. config",
                    ),
                ),
                (
                    "main_image",
                    filer.fields.image.FilerImageField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_category_image",
                        to=settings.FILER_IMAGE_MODEL,
                        verbose_name="main image",
                    ),
                ),
                (
                    "main_image_full",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_category_full",
                        to="filer.thumbnailoption",
                        verbose_name="main image full",
                    ),
                ),
                (
                    "main_image_thumbnail",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_category_thumbnail",
                        to="filer.thumbnailoption",
                        verbose_name="main image thumbnail",
                    ),
                ),
                ("priority", models.IntegerField(blank=True, null=True, verbose_name="priority")),
            ],
            options={
                "verbose_name": "blog category",
                "verbose_name_plural": "blog categories",
                "ordering": (
                    django.db.models.expressions.OrderBy(django.db.models.expressions.F("priority"), nulls_last=True),
                ),
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date_created", models.DateTimeField(auto_now_add=True, verbose_name="created")),
                ("date_modified", models.DateTimeField(auto_now=True, verbose_name="last modified")),
                ("date_published", models.DateTimeField(blank=True, null=True, verbose_name="published since")),
                ("date_published_end", models.DateTimeField(blank=True, null=True, verbose_name="published until")),
                ("publish", models.BooleanField(default=False, verbose_name="publish")),
                ("enable_comments", models.BooleanField(default=True, verbose_name="enable comments on post")),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="djangocms_blog_post_author",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="author",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="blog_posts",
                        to="djangocms_blog.BlogCategory",
                        verbose_name="category",
                    ),
                ),
                (
                    "main_image",
                    filer.fields.image.FilerImageField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_blog_post_image",
                        to=settings.FILER_IMAGE_MODEL,
                        verbose_name="main image",
                    ),
                ),
                (
                    "tags",
                    taggit_autosuggest.managers.TaggableManager(
                        blank=True,
                        help_text="Type a tag and hit tab, or start typing and select from autocomplete list.",
                        related_name="djangocms_blog_tags",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "sites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select sites in which to show the post. If none is set it will be visible in all the configured sites.",
                        to="sites.Site",
                        verbose_name="Site(s)",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        help_text="When selecting a value, the form is reloaded to get the updated default",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djangocms_blog.blogconfig",
                        verbose_name="app. config",
                    ),
                ),
                (
                    "main_image_full",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_blog_post_full",
                        to="filer.thumbnailoption",
                        verbose_name="main image full",
                    ),
                ),
                (
                    "main_image_thumbnail",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="djangocms_blog_post_thumbnail",
                        to="filer.thumbnailoption",
                        verbose_name="main image thumbnail",
                    ),
                ),
                ("enable_liveblog", models.BooleanField(default=False, verbose_name="enable liveblog on post")),
                ("date_featured", models.DateTimeField(blank=True, null=True, verbose_name="featured date")),
                (
                    "related",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True, help_text=None, to="djangocms_blog.Post", verbose_name="Related Posts"
                    ),
                ),
                ("include_in_rss", models.BooleanField(default=True, verbose_name="include in RSS feed")),
                (
                    "pinned",
                    models.IntegerField(
                        blank=True,
                        help_text="Pinned posts are shown in ascending order before unpinned ones. Leave blank for regular order by date.",
                        null=True,
                        verbose_name="pinning priority",
                    ),
                ),
            ],
            options={
                "ordering": (
                    django.db.models.expressions.OrderBy(django.db.models.expressions.F("pinned"), nulls_last=True),
                    "-date_published",
                    "-date_created",
                ),
                "get_latest_by": "date_published",
                "verbose_name": "blog article",
                "verbose_name_plural": "blog articles",
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name="LatestPostsPlugin",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "latest_posts",
                    models.IntegerField(
                        default=5, help_text="The number of latests articles to be displayed.", verbose_name="articles"
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Show only the blog articles tagged with chosen categories.",
                        to="djangocms_blog.BlogCategory",
                        verbose_name="filter by category",
                    ),
                ),
                (
                    "tags",
                    taggit_autosuggest.managers.TaggableManager(
                        blank=True,
                        help_text="Show only the blog articles tagged with chosen tags.",
                        related_name="djangocms_blog_latest_post",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="filter by tag",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        help_text="When selecting a value, the form is reloaded to get the updated default",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djangocms_blog.blogconfig",
                        verbose_name="app. config",
                    ),
                ),
                (
                    "current_site",
                    models.BooleanField(
                        default=True, help_text="Select items from the current site only", verbose_name="current site"
                    ),
                ),
                (
                    "template_folder",
                    models.CharField(
                        choices=[("plugins", "Default template")],
                        default="plugins",
                        help_text="Select plugin template to load for this instance",
                        max_length=200,
                        verbose_name="Plugin template",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.CreateModel(
            name="BlogCategoryTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language_code", models.CharField(db_index=True, max_length=15, verbose_name="Language")),
                ("name", models.CharField(max_length=752, verbose_name="name")),
                ("slug", models.SlugField(allow_unicode=True, blank=True, max_length=752, verbose_name="slug")),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="djangocms_blog.blogcategory",
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(blank=True, default="", verbose_name="category meta description"),
                ),
                (
                    "abstract",
                    djangocms_text_ckeditor.fields.HTMLField(blank=True, default="", verbose_name="abstract"),
                ),
            ],
            options={
                "db_table": "djangocms_blog_blogcategory_translation",
                "verbose_name": "blog category Translation",
                "default_permissions": (),
                "unique_together": {("language_code", "slug"), ("language_code", "master")},
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="BlogConfigTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language_code", models.CharField(db_index=True, max_length=15, verbose_name="Language")),
                ("app_title", models.CharField(default="Blog", max_length=200, verbose_name="application title")),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="djangocms_blog.blogconfig",
                    ),
                ),
                ("object_name", models.CharField(default="Article", max_length=200, verbose_name="object name")),
            ],
            options={
                "verbose_name": "blog config Translation",
                "db_table": "djangocms_blog_blogconfig_translation",
                "default_permissions": (),
                "db_tablespace": "",
                "managed": True,
                "unique_together": {("language_code", "master")},
            },
        ),
        migrations.CreateModel(
            name="PostContent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language", models.CharField(db_index=True, max_length=15, verbose_name="language")),
                ("title", models.CharField(max_length=752, verbose_name="title")),
                ("slug", models.SlugField(allow_unicode=True, blank=True, max_length=752, verbose_name="slug")),
                ("subtitle", models.CharField(blank=True, default="", max_length=767, verbose_name="subtitle")),
                (
                    "abstract",
                    djangocms_text_ckeditor.fields.HTMLField(blank=True, default="", verbose_name="abstract"),
                ),
                ("meta_description", models.TextField(blank=True, default="", verbose_name="post meta description")),
                ("meta_keywords", models.TextField(blank=True, default="", verbose_name="post meta keywords")),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="used in title tag and social sharing",
                        max_length=2000,
                        verbose_name="post meta title",
                    ),
                ),
                ("post_text", djangocms_text_ckeditor.fields.HTMLField(blank=True, default="", verbose_name="text")),
                ("post", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="djangocms_blog.post")),
            ],
            options={
                "get_latest_by": "date_published",
                "ordering": (
                    django.db.models.expressions.OrderBy(
                        django.db.models.expressions.F("post__pinned"), nulls_last=True
                    ),
                    "-post__date_published",
                    "-post__date_created",
                ),
                "verbose_name": "article content",
                "verbose_name_plural": "article contents",
                "unique_together": set(),
            },
            bases=(djangocms_blog.models.BlogMetaMixin, models.Model),
        ),
        migrations.CreateModel(
            name="GenericBlogPlugin",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        help_text="When selecting a value, the form is reloaded to get the updated default",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djangocms_blog.blogconfig",
                        verbose_name="app. config",
                    ),
                ),
                (
                    "current_site",
                    models.BooleanField(
                        default=True, help_text="Select items from the current site only", verbose_name="current site"
                    ),
                ),
                (
                    "template_folder",
                    models.CharField(
                        choices=[("plugins", "Default template")],
                        default="plugins",
                        help_text="Select plugin template to load for this instance",
                        max_length=200,
                        verbose_name="Plugin template",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.CreateModel(
            name="AuthorEntriesPlugin",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "latest_posts",
                    models.IntegerField(
                        default=5, help_text="The number of author articles to be displayed.", verbose_name="articles"
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        limit_choices_to={"djangocms_blog_post_author__publish": True},
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="authors",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        help_text="When selecting a value, the form is reloaded to get the updated default",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djangocms_blog.blogconfig",
                        verbose_name="app. config",
                    ),
                ),
                (
                    "current_site",
                    models.BooleanField(
                        default=True, help_text="Select items from the current site only", verbose_name="current site"
                    ),
                ),
                (
                    "template_folder",
                    models.CharField(
                        choices=[("plugins", "Default template")],
                        default="plugins",
                        help_text="Select plugin template to load for this instance",
                        max_length=200,
                        verbose_name="Plugin template",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
    ]
